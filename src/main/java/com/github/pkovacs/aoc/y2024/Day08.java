package com.github.pkovacs.aoc.y2024;

import java.util.HashSet;
import java.util.stream.Stream;

import com.github.pkovacs.util.data.Cell;
import com.github.pkovacs.util.data.CharTable;

public class Day08 extends AbstractDay {

    public static void main(String[] args) {
        var table = new CharTable(readLines(getInputPath()));

        System.out.println("Part 1: " + solve(table, 1));
        System.out.println("Part 2: " + solve(table, 2));
    }

    private static int solve(CharTable table, int part) {
        var set = new HashSet<Cell>();
        table.values().filter(c -> c != '.').distinct().forEach(ch -> {
            var antennas = table.findAll(ch).toList();
            for (var p : antennas) {
                for (var q : antennas) {
                    if (p != q) {
                        antinodes(table, p, q, part).forEach(set::add);
                    }
                }
            }
        });
        return set.size();
    }

    /**
     * Returns the antinodes generated by the given two antennas in one direction.
     * <p>
     * Note: we assume that the differences in x and y coordinates of any two antennas of the same type are
     * relative primes, so it's enough to iterate the difference between the antennas. It seems to be true for
     * any input file of the puzzle.
     */
    private static Stream<Cell> antinodes(CharTable table, Cell p, Cell q, int part) {
        return part == 1 ? table.ray(p, q).skip(1).limit(1) : table.ray(p, q);
    }

}
